{"ast":null,"code":"import{useDispatch,useSelector}from\"react-redux\";import{toast}from\"react-toastify\";import{postsByUser,selectedPost}from\"../../api/requests\";import{setPostsByUser,setPost}from\"../../redux/slice/users\";export const usePosts=()=>{const dispatch=useDispatch();const post=useSelector(state=>state.data.post);const posts=useSelector(state=>state.data.postsByUser);const getPost=id=>{selectedPost(id).then(_ref=>{let{data}=_ref;return dispatch(setPost(data));}).catch(error=>toast.error(error));};const getPostsByUsers=id=>{postsByUser(id).then(_ref2=>{let{data}=_ref2;return dispatch(setPostsByUser(data));}).catch(error=>toast.error(error));};const clearPosts=()=>dispatch(setPostsByUser([]));const clearPost=()=>dispatch(setPost(null));return{post,posts,getPost,getPostsByUsers,clearPosts,clearPost};};","map":{"version":3,"names":["useDispatch","useSelector","toast","postsByUser","selectedPost","setPostsByUser","setPost","usePosts","dispatch","post","state","data","posts","getPost","id","then","_ref","catch","error","getPostsByUsers","_ref2","clearPosts","clearPost"],"sources":["/Users/macbook/Documents/Own projects/albums/src/hooks/api/usePosts.ts"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\nimport { postsByUser, selectedPost } from \"../../api/requests\";\nimport { setPostsByUser, setPost } from \"../../redux/slice/users\";\n\nimport { IPost } from \"../../types/response\";\nimport { RootState } from \"../../redux/store\";\n\ninterface IUsePosts {\n    post: IPost | null;\n    posts: IPost[];\n    getPost: (id: number) => void;\n    getPostsByUsers: (id: number) => void;\n    clearPosts: () => void;\n    clearPost: () => void;\n}\n\nexport const usePosts = (): IUsePosts => {\n    const dispatch = useDispatch();\n\n    const post = useSelector((state: RootState) => state.data.post);\n\n    const posts = useSelector((state: RootState) => state.data.postsByUser);\n\n    const getPost = (id: number) => {\n        selectedPost(id)\n            .then(({ data }) => dispatch(setPost(data)))\n            .catch((error) => toast.error(error));\n    };\n\n    const getPostsByUsers = (id: number) => {\n        postsByUser(id)\n            .then(({ data }) => dispatch(setPostsByUser(data)))\n            .catch((error) => toast.error(error));\n    };\n\n    const clearPosts = () => dispatch(setPostsByUser([]));\n\n    const clearPost = () => dispatch(setPost(null));\n\n    return {\n        post,\n        posts,\n        getPost,\n        getPostsByUsers,\n        clearPosts,\n        clearPost,\n    };\n};"],"mappings":"AAAA,OAASA,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,KAAK,KAAQ,gBAAgB,CAEtC,OAASC,WAAW,CAAEC,YAAY,KAAQ,oBAAoB,CAC9D,OAASC,cAAc,CAAEC,OAAO,KAAQ,yBAAyB,CAcjE,MAAO,MAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAiB,CACrC,KAAM,CAAAC,QAAQ,CAAGR,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAAS,IAAI,CAAGR,WAAW,CAAES,KAAgB,EAAKA,KAAK,CAACC,IAAI,CAACF,IAAI,CAAC,CAE/D,KAAM,CAAAG,KAAK,CAAGX,WAAW,CAAES,KAAgB,EAAKA,KAAK,CAACC,IAAI,CAACR,WAAW,CAAC,CAEvE,KAAM,CAAAU,OAAO,CAAIC,EAAU,EAAK,CAC5BV,YAAY,CAACU,EAAE,CAAC,CACXC,IAAI,CAACC,IAAA,MAAC,CAAEL,IAAK,CAAC,CAAAK,IAAA,OAAK,CAAAR,QAAQ,CAACF,OAAO,CAACK,IAAI,CAAC,CAAC,GAAC,CAC3CM,KAAK,CAAEC,KAAK,EAAKhB,KAAK,CAACgB,KAAK,CAACA,KAAK,CAAC,CAAC,CAC7C,CAAC,CAED,KAAM,CAAAC,eAAe,CAAIL,EAAU,EAAK,CACpCX,WAAW,CAACW,EAAE,CAAC,CACVC,IAAI,CAACK,KAAA,MAAC,CAAET,IAAK,CAAC,CAAAS,KAAA,OAAK,CAAAZ,QAAQ,CAACH,cAAc,CAACM,IAAI,CAAC,CAAC,GAAC,CAClDM,KAAK,CAAEC,KAAK,EAAKhB,KAAK,CAACgB,KAAK,CAACA,KAAK,CAAC,CAAC,CAC7C,CAAC,CAED,KAAM,CAAAG,UAAU,CAAGA,CAAA,GAAMb,QAAQ,CAACH,cAAc,CAAC,EAAE,CAAC,CAAC,CAErD,KAAM,CAAAiB,SAAS,CAAGA,CAAA,GAAMd,QAAQ,CAACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAE/C,MAAO,CACHG,IAAI,CACJG,KAAK,CACLC,OAAO,CACPM,eAAe,CACfE,UAAU,CACVC,SACJ,CAAC,CACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}